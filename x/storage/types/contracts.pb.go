// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canine_chain/storage/contracts.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Contracts struct {
	Cid        string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Priceamt   string `protobuf:"bytes,2,opt,name=priceamt,proto3" json:"priceamt,omitempty"`
	Pricedenom string `protobuf:"bytes,3,opt,name=pricedenom,proto3" json:"pricedenom,omitempty"`
	Creator    string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	Merkle     string `protobuf:"bytes,5,opt,name=merkle,proto3" json:"merkle,omitempty"`
	Signee     string `protobuf:"bytes,6,opt,name=signee,proto3" json:"signee,omitempty"`
	Duration   string `protobuf:"bytes,7,opt,name=duration,proto3" json:"duration,omitempty"`
	Filesize   string `protobuf:"bytes,8,opt,name=filesize,proto3" json:"filesize,omitempty"`
	Fid        string `protobuf:"bytes,9,opt,name=fid,proto3" json:"fid,omitempty"`
	Age        int64  `protobuf:"varint,10,opt,name=age,proto3" json:"age,omitempty"`
}

func (m *Contracts) Reset()         { *m = Contracts{} }
func (m *Contracts) String() string { return proto.CompactTextString(m) }
func (*Contracts) ProtoMessage()    {}
func (*Contracts) Descriptor() ([]byte, []int) {
	return fileDescriptor_69cb5e3b60cb0642, []int{0}
}
func (m *Contracts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Contracts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Contracts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Contracts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contracts.Merge(m, src)
}
func (m *Contracts) XXX_Size() int {
	return m.Size()
}
func (m *Contracts) XXX_DiscardUnknown() {
	xxx_messageInfo_Contracts.DiscardUnknown(m)
}

var xxx_messageInfo_Contracts proto.InternalMessageInfo

func (m *Contracts) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *Contracts) GetPriceamt() string {
	if m != nil {
		return m.Priceamt
	}
	return ""
}

func (m *Contracts) GetPricedenom() string {
	if m != nil {
		return m.Pricedenom
	}
	return ""
}

func (m *Contracts) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Contracts) GetMerkle() string {
	if m != nil {
		return m.Merkle
	}
	return ""
}

func (m *Contracts) GetSignee() string {
	if m != nil {
		return m.Signee
	}
	return ""
}

func (m *Contracts) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *Contracts) GetFilesize() string {
	if m != nil {
		return m.Filesize
	}
	return ""
}

func (m *Contracts) GetFid() string {
	if m != nil {
		return m.Fid
	}
	return ""
}

func (m *Contracts) GetAge() int64 {
	if m != nil {
		return m.Age
	}
	return 0
}

type ContractV2 struct {
	Cid       string   `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Creator   string   `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Providers []string `protobuf:"bytes,3,rep,name=providers,proto3" json:"providers,omitempty"`
	Merkle    string   `protobuf:"bytes,4,opt,name=merkle,proto3" json:"merkle,omitempty"`
	Duration  int64    `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	Filesize  uint64   `protobuf:"varint,6,opt,name=filesize,proto3" json:"filesize,omitempty"`
	Fid       string   `protobuf:"bytes,7,opt,name=fid,proto3" json:"fid,omitempty"`
	Age       int64    `protobuf:"varint,8,opt,name=age,proto3" json:"age,omitempty"`
}

func (m *ContractV2) Reset()         { *m = ContractV2{} }
func (m *ContractV2) String() string { return proto.CompactTextString(m) }
func (*ContractV2) ProtoMessage()    {}
func (*ContractV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_69cb5e3b60cb0642, []int{1}
}
func (m *ContractV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractV2.Merge(m, src)
}
func (m *ContractV2) XXX_Size() int {
	return m.Size()
}
func (m *ContractV2) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractV2.DiscardUnknown(m)
}

var xxx_messageInfo_ContractV2 proto.InternalMessageInfo

func (m *ContractV2) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *ContractV2) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ContractV2) GetProviders() []string {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *ContractV2) GetMerkle() string {
	if m != nil {
		return m.Merkle
	}
	return ""
}

func (m *ContractV2) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *ContractV2) GetFilesize() uint64 {
	if m != nil {
		return m.Filesize
	}
	return 0
}

func (m *ContractV2) GetFid() string {
	if m != nil {
		return m.Fid
	}
	return ""
}

func (m *ContractV2) GetAge() int64 {
	if m != nil {
		return m.Age
	}
	return 0
}

func init() {
	proto.RegisterType((*Contracts)(nil), "canine_chain.storage.Contracts")
	proto.RegisterType((*ContractV2)(nil), "canine_chain.storage.ContractV2")
}

func init() {
	proto.RegisterFile("canine_chain/storage/contracts.proto", fileDescriptor_69cb5e3b60cb0642)
}

var fileDescriptor_69cb5e3b60cb0642 = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xbd, 0x6e, 0x2a, 0x31,
	0x10, 0x85, 0x31, 0xcb, 0xdf, 0xba, 0xba, 0x5a, 0x5d, 0x5d, 0x59, 0x57, 0x91, 0x85, 0x50, 0x0a,
	0x9a, 0xb0, 0x12, 0x79, 0x83, 0xa4, 0xa5, 0xa2, 0x48, 0x91, 0x26, 0x32, 0xde, 0x61, 0x71, 0x60,
	0xed, 0x95, 0x6d, 0xa2, 0x24, 0x4f, 0x91, 0xc7, 0x8a, 0x52, 0x51, 0xa6, 0x8c, 0xe0, 0x41, 0x12,
	0xd9, 0x66, 0xc9, 0x22, 0xe8, 0xe6, 0x9c, 0x33, 0xc5, 0x7c, 0xa3, 0x83, 0x2f, 0x39, 0x93, 0x42,
	0xc2, 0x03, 0x5f, 0x30, 0x21, 0x53, 0x63, 0x95, 0x66, 0x39, 0xa4, 0x5c, 0x49, 0xab, 0x19, 0xb7,
	0x66, 0x54, 0x6a, 0x65, 0x55, 0xf2, 0xb7, 0xbe, 0x35, 0xda, 0x6f, 0x0d, 0xbe, 0x11, 0x8e, 0x6f,
	0xab, 0xcd, 0xe4, 0x0f, 0x8e, 0xb8, 0xc8, 0x08, 0xea, 0xa3, 0x61, 0x3c, 0x75, 0x63, 0xf2, 0x1f,
	0xf7, 0x4a, 0x2d, 0x38, 0xb0, 0xc2, 0x92, 0xa6, 0xb7, 0x0f, 0x3a, 0xa1, 0x18, 0xfb, 0x39, 0x03,
	0xa9, 0x0a, 0x12, 0xf9, 0xb4, 0xe6, 0x24, 0x04, 0x77, 0xb9, 0x06, 0x66, 0x95, 0x26, 0x2d, 0x1f,
	0x56, 0x32, 0xf9, 0x87, 0x3b, 0x05, 0xe8, 0xe5, 0x0a, 0x48, 0xdb, 0x07, 0x7b, 0xe5, 0x7c, 0x23,
	0x72, 0x09, 0x40, 0x3a, 0xc1, 0x0f, 0xca, 0x5d, 0x91, 0xad, 0x35, 0xb3, 0x42, 0x49, 0xd2, 0x0d,
	0x57, 0x54, 0xda, 0x65, 0x73, 0xb1, 0x02, 0x23, 0x5e, 0x81, 0xf4, 0x42, 0x56, 0x69, 0xc7, 0x33,
	0x17, 0x19, 0x89, 0x03, 0xcf, 0x5c, 0x64, 0xce, 0x61, 0x39, 0x10, 0xdc, 0x47, 0xc3, 0x68, 0xea,
	0xc6, 0xc1, 0x07, 0xc2, 0xb8, 0xfa, 0xc0, 0xdd, 0xf8, 0xcc, 0x0b, 0x6a, 0x18, 0xcd, 0x63, 0x8c,
	0x0b, 0x1c, 0x97, 0x5a, 0x3d, 0x89, 0x0c, 0xb4, 0x21, 0x51, 0x3f, 0x1a, 0xc6, 0xd3, 0x5f, 0xa3,
	0x06, 0xd9, 0x3a, 0x82, 0xac, 0xc3, 0xb4, 0xfd, 0x1d, 0xe7, 0x61, 0xdc, 0x0b, 0x5a, 0xa7, 0x30,
	0xdd, 0x13, 0x98, 0xde, 0x01, 0xe6, 0x66, 0xf2, 0xbe, 0xa5, 0x68, 0xb3, 0xa5, 0xe8, 0x6b, 0x4b,
	0xd1, 0xdb, 0x8e, 0x36, 0x36, 0x3b, 0xda, 0xf8, 0xdc, 0xd1, 0xc6, 0xfd, 0x38, 0x17, 0x76, 0xb1,
	0x9e, 0x8d, 0xb8, 0x2a, 0xd2, 0x47, 0xc6, 0x97, 0x6c, 0x35, 0x61, 0x33, 0x93, 0x86, 0x52, 0x5c,
	0x85, 0xea, 0x3c, 0x1f, 0xca, 0x63, 0x5f, 0x4a, 0x30, 0xb3, 0x8e, 0x6f, 0xce, 0xf5, 0x4f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xc7, 0xe0, 0x96, 0x90, 0x61, 0x02, 0x00, 0x00,
}

func (m *Contracts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contracts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Contracts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Age != 0 {
		i = encodeVarintContracts(dAtA, i, uint64(m.Age))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Fid) > 0 {
		i -= len(m.Fid)
		copy(dAtA[i:], m.Fid)
		i = encodeVarintContracts(dAtA, i, uint64(len(m.Fid)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Filesize) > 0 {
		i -= len(m.Filesize)
		copy(dAtA[i:], m.Filesize)
		i = encodeVarintContracts(dAtA, i, uint64(len(m.Filesize)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintContracts(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Signee) > 0 {
		i -= len(m.Signee)
		copy(dAtA[i:], m.Signee)
		i = encodeVarintContracts(dAtA, i, uint64(len(m.Signee)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintContracts(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintContracts(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Pricedenom) > 0 {
		i -= len(m.Pricedenom)
		copy(dAtA[i:], m.Pricedenom)
		i = encodeVarintContracts(dAtA, i, uint64(len(m.Pricedenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Priceamt) > 0 {
		i -= len(m.Priceamt)
		copy(dAtA[i:], m.Priceamt)
		i = encodeVarintContracts(dAtA, i, uint64(len(m.Priceamt)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintContracts(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Age != 0 {
		i = encodeVarintContracts(dAtA, i, uint64(m.Age))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Fid) > 0 {
		i -= len(m.Fid)
		copy(dAtA[i:], m.Fid)
		i = encodeVarintContracts(dAtA, i, uint64(len(m.Fid)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Filesize != 0 {
		i = encodeVarintContracts(dAtA, i, uint64(m.Filesize))
		i--
		dAtA[i] = 0x30
	}
	if m.Duration != 0 {
		i = encodeVarintContracts(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintContracts(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Providers[iNdEx])
			copy(dAtA[i:], m.Providers[iNdEx])
			i = encodeVarintContracts(dAtA, i, uint64(len(m.Providers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintContracts(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintContracts(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintContracts(dAtA []byte, offset int, v uint64) int {
	offset -= sovContracts(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Contracts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovContracts(uint64(l))
	}
	l = len(m.Priceamt)
	if l > 0 {
		n += 1 + l + sovContracts(uint64(l))
	}
	l = len(m.Pricedenom)
	if l > 0 {
		n += 1 + l + sovContracts(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovContracts(uint64(l))
	}
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovContracts(uint64(l))
	}
	l = len(m.Signee)
	if l > 0 {
		n += 1 + l + sovContracts(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovContracts(uint64(l))
	}
	l = len(m.Filesize)
	if l > 0 {
		n += 1 + l + sovContracts(uint64(l))
	}
	l = len(m.Fid)
	if l > 0 {
		n += 1 + l + sovContracts(uint64(l))
	}
	if m.Age != 0 {
		n += 1 + sovContracts(uint64(m.Age))
	}
	return n
}

func (m *ContractV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovContracts(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovContracts(uint64(l))
	}
	if len(m.Providers) > 0 {
		for _, s := range m.Providers {
			l = len(s)
			n += 1 + l + sovContracts(uint64(l))
		}
	}
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovContracts(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovContracts(uint64(m.Duration))
	}
	if m.Filesize != 0 {
		n += 1 + sovContracts(uint64(m.Filesize))
	}
	l = len(m.Fid)
	if l > 0 {
		n += 1 + l + sovContracts(uint64(l))
	}
	if m.Age != 0 {
		n += 1 + sovContracts(uint64(m.Age))
	}
	return n
}

func sovContracts(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContracts(x uint64) (n int) {
	return sovContracts(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Contracts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContracts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contracts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contracts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContracts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContracts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priceamt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContracts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContracts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Priceamt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pricedenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContracts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContracts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pricedenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContracts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContracts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContracts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContracts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContracts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContracts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContracts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContracts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filesize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContracts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContracts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filesize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContracts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContracts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContracts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContracts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContracts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContracts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContracts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContracts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContracts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContracts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContracts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContracts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContracts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filesize", wireType)
			}
			m.Filesize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Filesize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContracts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContracts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContracts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContracts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContracts(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContracts
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContracts
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContracts
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContracts
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContracts        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContracts          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContracts = fmt.Errorf("proto: unexpected end of group")
)
